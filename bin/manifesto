#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'elf_manifesto'
require 'elf_manifesto/manifest_maker'

program :version, ElfManifesto::VERSION
program :description, 'Creates file manifests from file collections and mustache templates'
 
command :create do |c|
  c.syntax = 'manifesto create [options]'
  c.summary = 'creates a manifest file'
  c.description = 'Create a manifest from file collections and a template'
  c.example 'Create a manifest from template.mustache and the jpgs in the images directory', "manifesto --template template.mustache 'images/*.jpg'"
  c.example 'Pass arbitrary properties to be used in the template', "manifesto --template template.mustache --properties '{ id: 1234 }' images/*.jpg'"

  c.option '-m', '--template STRING', String, 'Template file'
	c.option '-o', '--output_file STRING', String, 'Target for manifest output'
	c.option '-p', '--properties STRING', String, 'Property hash'
	

  c.action do |args, options|
    # Do something or c.when_called Manifesto::Commands::Create
		if (options.template.nil? || args.empty?)
			say <<-MESSAGE
Manifesto! throw me a frickin' bone here!
I need some parameters
Use --help to find out how
					MESSAGE
		else
			# puts "Creating a manifesto from #{options.template} and #{args}"
			message = ""
			message += "Creating #{options.output_file} from #{options.template} with:" unless options.output_file.nil?
			
			props = {}
			props = eval(options.properties) unless options.properties.nil?
			
			ops = {
				template: options.template,
				globs: args,
				props: props
			}
			
			manifesto = ElfManifesto::ManifestMaker.new(ops)
		end
  end
end

default_command :create
